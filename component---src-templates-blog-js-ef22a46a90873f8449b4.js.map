{"version":3,"sources":["webpack://blog/./src/components/Bio.js","webpack://blog/./src/components/TableOfContents.js","webpack://blog/./src/templates/blog.js"],"names":["data","useStaticQuery","site","siteMetadata","author","social","className","S","layout","formats","src","width","height","quality","alt","headings","headingList","map","item","id","value","replace","toLowerCase","activeId","useState","setActiveId","useEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","rootMargin","document","querySelector","observe","unobserve","useActiveId","length","heading","depth","key","style","marginLeft","href","PageContent","post","itemScope","itemType","itemProp","frontmatter","title","date","dangerouslySetInnerHTML","__html","html","Bio","location","markdownRemark","siteTitle","previous","next","Layout","Seo","description","excerpt","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"mappings":"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","file":"component---src-templates-blog-js-ef22a46a90873f8449b4.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"AUTO\", \"WEBP\", \"AVIF\"]}\n        src=\"../images/photo.jpg\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {/* <p>111</p> */}\n    </div>\n  )\n}\n\nexport default Bio\n","import React, { useEffect, useState } from \"react\"\nimport \"./TableOfContents.css\"\n\nconst TableOfContents = ({ headings }) => {\n  const headingList = headings.map(item => {\n    return {\n      ...item,\n      id: `#${item.value.replace(/\\s+/g, \"-\").toLowerCase()}`,\n    }\n  })\n  const activeId = useActiveId(headingList)\n\n  if (headings.length === 0) return null\n\n  return (\n    <ul className=\"table_list\">\n      <h3 className=\"title\">Table of contents</h3>\n      <div className=\"headings\">\n        {headingList.map(heading => {\n          const isActive = `#${activeId}` === heading.id\n          const className = isActive ? \"active\" : \"\"\n\n          if (heading.depth > 4) {\n            return <div />\n          }\n          return (\n            <li\n              key={heading.id}\n              style={{ marginLeft: `${heading.depth * 10}px` }}\n            >\n              <a href={heading.id} className={className}>\n                {heading.value}\n              </a>\n            </li>\n          )\n        })}\n      </div>\n    </ul>\n  )\n}\n\nfunction useActiveId(headingList) {\n  const [activeId, setActiveId] = useState(``)\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            setActiveId(entry.target.id)\n          }\n        })\n      },\n      { rootMargin: `0% 0% -80% 0%` }\n    )\n\n    headingList.forEach(item => {\n      const target = document.querySelector(item.id)\n      if (!target) return\n      observer.observe(target)\n    })\n\n    return () => {\n      headingList.forEach(item => {\n        const target = document.querySelector(item.id)\n        if (!target) return\n        observer.unobserve(target)\n      })\n    }\n  }, [headingList])\n\n  return activeId\n}\n\nexport default TableOfContents\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Bio from \"../components/Bio\"\nimport Layout from \"../components/Layout\"\nimport Seo from \"../components/Seo\"\nimport TableOfContents from \"../components/TableOfContents\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <TableOfContents headings={post.headings} />\n      <PageContent post={post} location={location} />\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nfunction PageContent({ post }) {\n  return (\n    <article\n      className=\"blog-post\"\n      itemScope\n      itemType=\"http://schema.org/Article\"\n    >\n      <header>\n        <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n        <p>{post.frontmatter.date}</p>\n      </header>\n      <section\n        dangerouslySetInnerHTML={{ __html: post.html }}\n        itemProp=\"articleBody\"\n      />\n      <hr />\n      <footer>\n        <Bio />\n      </footer>\n    </article>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      headings {\n        value,\n        id,\n        depth\n      }\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        draft\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}