{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/how-does-setstate-know-what-to-do/","result":{"data":{"markdownRemark":{"id":"5f3a6f7e-0688-5ad1-9088-297c381933d6","html":"<p>原文: <a href=\"https://overreacted.io/how-does-setstate-know-what-to-do/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How Does setState Know What to Do?</a></p>\n<p>当我们在 React 中调用 <code class=\"language-text\">setState</code> 时, 实际上发生了什么呢?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> clicked<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> clicked<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Thanks</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Click me!\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>对于以上代码, 当状态变化为 <code class=\"language-text\">{ clicked: true }</code> 时, DOM会变化为 <code class=\"language-text\">&lt;h1&gt;Thanks&lt;/h1&gt;</code> </p>\n<p>看起来很直接, 不过这部分操作是 React 还是 React DOM 做的呢? </p>\n<p>我们可能会认为, 更新 DOM 的工作是由 React DOM 负责的. 但是我们调用的 <code class=\"language-text\">this.setState()</code> 并不是来自于 React DOM. 而是 <code class=\"language-text\">React.Component</code> 所提供的方法, 而这个方法实际上定义在 React 中. </p>\n<p>那么 <code class=\"language-text\">React.Component</code> 中的 <code class=\"language-text\">setState()</code>方法是如何更新 DOM 的呢?</p>\n<p><strong>注意: 和博客中的<a href=\"https://overreacted.io/why-do-we-write-super-props/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">许多</a> <a href=\"https://overreacted.io/how-does-react-tell-a-class-from-a-function/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">其他</a> <a href=\"https://overreacted.io/why-do-react-elements-have-typeof-property/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>一样, 本篇文章的目的是分析 React 的原理, 并不意味着不理解文章的内容就会对高效使用 React 有任何影响. 文章的受众是对 React 底层原理有好奇心的人~ 并非强制阅读.</strong></p>\n<hr>\n<p>大家也许会认为 <code class=\"language-text\">React.Component</code> 类中包含了更新 DOM 的逻辑.</p>\n<p>但是如果以上推断成立的话, <code class=\"language-text\">this.setState()</code> 在其他环境下是怎么正常工作的呢? 比如说, React Native APP 的组件同样继承自 <code class=\"language-text\">React.Compoent</code> . 也是以同样的方式调用 <code class=\"language-text\">this.setState()</code> 的. 然而在Android 和 IOS 原生 View 中并没有 DOM 的概念.</p>\n<p>你可能听说过 React Test Renderer 或者 Shallow Renderer. 这两种测试的策略都是渲染普通的组件然后在内调用 <code class=\"language-text\">this.setState()</code> 方法. 但是两者都不是在 DOM 中操作的.</p>\n<p>如果有人使用过类似 <a href=\"https://github.com/facebook/react/tree/master/packages/react-art\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React ART</a> 的渲染器. 也许会知道, 在一个页面中可以使用多个渲染器. (举个例子: ART 组件是在 React DOM 树下工作的). 这样的情况限制了我们使用全局标识位的方法.</p>\n<p><code class=\"language-text\">React.Component</code> 将状态更新的工作<strong>委托给了宿主平台(DOM或者native view).</strong> 在深入理解其中的实现原理之前, 我们先看看React是如何解耦的.</p>\n<hr>\n<p>最常见的错误观念是React “引擎” 处于 <code class=\"language-text\">react</code> 这个库中, 实际上是并不正确的.</p>\n<p>自从 React 0.14 版本决定将各个包进行 <a href=\"https://reactjs.org/blog/2015/07/03/react-v0.14-beta-1.html#two-packages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">解耦拆分</a>之后, <code class=\"language-text\">react</code> 只暴露了一些定义组件的API, 大部分内部的实现都在 “渲染器(renderer)” 中.</p>\n<p>包括<code class=\"language-text\">react-dom</code>, <code class=\"language-text\">react-dom/server</code>, <code class=\"language-text\">react-native</code>, <code class=\"language-text\">react-test-render</code> , <code class=\"language-text\">react-art</code> 等(你也可以<a href=\"https://github.com/facebook/react/blob/master/packages/react-reconciler/README.md#practical-examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">创造自己的渲染器</a>). </p>\n<p>这也是 <code class=\"language-text\">react</code> 在不同的平台下都能保持功能一致的原因. 所有这些输出的API , 比如  <code class=\"language-text\">React.Component</code> , <code class=\"language-text\">React.createElement</code> , <code class=\"language-text\">React.Children</code> 以及 <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a> . 其中的逻辑都是和目标平台完全解耦的. 无论在何种平台下, React 的使用方式都是一致的.</p>\n<p>唯一有区别的是, 渲染器会暴露的平台特有的一些 API, 如 <code class=\"language-text\">ReactDOM.render()</code> 用于在对应的宿主平台渲染对应的 React 组件. 在理想情况下, 大多数组件不需要从渲染器中引入任何元素. 这使其可移植性变得更高.</p>\n<p><strong>大多数人概念中的 React 引擎 , 实际上存在于各自的渲染器中.</strong> 许多渲染器中所包含的部分代码, 实际上都是一致的, 比如说<a href=\"https://github.com/facebook/react/tree/master/packages/react-reconciler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">协调器</a>, 就是被拷贝到渲染器中的. 通过<a href=\"https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html#migrating-to-google-closure-compiler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">构建</a>的过程, 渲染器相关代码与协调器相关代码被整合到一起, 以实现性能的优化. (因为大部分情况下, 一个应用只需要一个渲染器, 比如 <code class=\"language-text\">react-dom</code>即可, 因此拷贝协调器代码并不会影响最终的应用代码体积.)</p>\n<p> 这里需要了解的一点是, <code class=\"language-text\">react</code> 包只提供了一些 React 相关特性, 包本身并不包含这些特性的实现代码. 而渲染器包 (<code class=\"language-text\">react-dom</code>, <code class=\"language-text\">react-native</code> 等) 才是真正负责了 React 特性的实现, 与此同时还包括了一些平台特定的逻辑. 存在一些共同的部分(比如说<a href=\"https://github.com/facebook/react/tree/master/packages/react-reconciler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">协调器</a>), 具体还是需要看各个渲染器本身的实现细节.</p>\n<hr>\n<p>这样一来, 大家可能就理解了, 为什么每次更新包版本时, 不仅要更新 <code class=\"language-text\">react</code> , 同时还要更新 <code class=\"language-text\">react-dom</code> . 举例来说, React 16.3 添加了一个新的 Context API, React 包暴露了 <code class=\"language-text\">React.createContext()</code> 这个方法.</p>\n<p>但是实际上, <code class=\"language-text\">React.createContext()</code> 本身并没有实现 context 的特性. 因为实现的细节是有平台差异的, 在 React DOM 和 React DOM Server 中的实现方式是有所差别的, <code class=\"language-text\">createContext()</code> 只是返回了一些对象而已:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 简化版的代码</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">defaultValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    _currentValue<span class=\"token operator\">:</span> defaultValue<span class=\"token punctuation\">,</span>\n    Provider<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    Consumer<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  context<span class=\"token punctuation\">.</span>Provider <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.provider'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _context<span class=\"token operator\">:</span> context\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  context<span class=\"token punctuation\">.</span>Consumer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.context'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _context<span class=\"token operator\">:</span> context<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当我们在代码中使用 <code class=\"language-text\">&lt;MyContext.Provider&gt;</code> 或者 <code class=\"language-text\">&lt;MyContext.Consumer&gt;</code> 时, 是 <code class=\"language-text\">renderer</code> 渲染器决定了如何处理他们. React DOM 和 React DOM Server 追踪 context 值的方式可能完全不一致.</p>\n<p><strong>因此如果你将 <code class=\"language-text\">react</code> 更新到了 16.3+ 但是没有更新 <code class=\"language-text\">react-dom</code> 的话, 代码中的 <code class=\"language-text\">Provider</code> 和 <code class=\"language-text\">Consumer</code> 可能就会被忽略, 并</strong><a href=\"https://stackoverflow.com/a/49677020/458193\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">导致这样的报错</a><strong>.</strong></p>\n<p>React Native 也是同样. 不过有一点区别是, 有些版本的 React 更新并不强制要求 React Native 的版本更新. 两者的更新频次并不完全一致. 这是因为 React Native 库会经常<a href=\"https://github.com/facebook/react-native/commits/master/Libraries/Renderer/oss\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">自动同步渲染器相关的代码</a>. </p>\n<hr>\n<p>现在我们知道了, 其实 <code class=\"language-text\">react</code> 包中并没有很多有趣的代码, 许多功能的实现细节都在渲染器 <code class=\"language-text\">react-dom</code>, <code class=\"language-text\">react-native</code>… 中. 但是说了这么多, 好像并没有回答我们题目中提出的问题. <code class=\"language-text\">React.Component</code> 中的 <code class=\"language-text\">setState()</code> 到底是怎么告诉对应的渲染器更新状态的呢?</p>\n<p><strong>答案是每一个渲染器都在所创建的类中设置了一个特殊的属性.</strong> 这个属性是 <code class=\"language-text\">updater</code> . 当我们基于自己实现的类创建出一个实例之后, React DOM, React DOM Server 或者 React Native 就会在这个实例中设置一个 <code class=\"language-text\">updater</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Inside React DOM</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactDOMUpdater<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Inside React DOM Server</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactDOMServerUpdater<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Inside React Native</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></code></pre></div>\n<p>查看 <code class=\"language-text\">[setState</code> 的源码](<a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactBaseClasses.js#L58-L67\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactBaseClasses.js#L58-L67</a>), 我们会发现, 它做的事情是将具体的工作委托给对应的渲染器:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// A bit simplified</span>\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">partialState<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use the `updater` field to talk back to the renderer!</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updater<span class=\"token punctuation\">.</span><span class=\"token function\">enqueueSetState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> partialState<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React DOM Server <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRenderer.js#L442-L448\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">会忽略这个更新</a>并抛出告警, 而 React DOM 和 React Native 则是会让对应的<a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberClassComponent.js#L190-L207\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">协调器</a>来处理这次更新.</p>\n<hr>\n<p>前面所说的都是类式组件的实现原理, 那么 Hooks 是怎么做的呢?</p>\n<p>当大家第一次看 <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks 提案 API</a> 的时候, 经常会有这样的疑惑: <code class=\"language-text\">useState</code> 是怎么知道要做什么的. 大家会觉得其中的实现细节比类式组件更加”神奇”. </p>\n<p>但是根据前面的叙述可以看出来, 基类 <code class=\"language-text\">setState()</code> 的实现并不是我们想象的那样. 它仅仅只是将具体的工作托管给了对应的渲染器. <code class=\"language-text\">useState</code> 实际上<a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactHooks.js#L55-L56\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">做的也是类似的事情</a>. </p>\n<p>唯一的不同是, 用的并非 <code class=\"language-text\">updater</code> , 而是 <code class=\"language-text\">dispather</code> 对象. 当我们调用 <code class=\"language-text\">React.useState()</code> , <code class=\"language-text\">React.useEffect()</code>, 或者其他内置的 hook 时, 这些调用都托管给了当前的 <code class=\"language-text\">dispatcher</code> .</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// In React (simplified a bit)</span>\n<span class=\"token keyword\">const</span> React <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Real property is hidden a bit deeper, see if you can find it!</span>\n  __currentDispatcher<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>对应的渲染在我们渲染组件之前, 设置了这个 <code class=\"language-text\">dispatcher</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// In React DOM</span>\n<span class=\"token keyword\">const</span> prevDispatcher <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">;</span>\nReact<span class=\"token punctuation\">.</span>__currentDispatcher <span class=\"token operator\">=</span> ReactDOMDispatcher<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  result <span class=\"token operator\">=</span> <span class=\"token function\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Restore it back</span>\n  React<span class=\"token punctuation\">.</span>__currentDispatcher <span class=\"token operator\">=</span> prevDispatcher<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React DOM Server 的具体<a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L340-L354\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">实现</a>, 协调器的具体<a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberHooks.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">实现</a>也依然是 React DOM 与 React Native 共享的.</p>\n<p>这也是为什么我们使用 Hooks 时, 依然同时依赖 <code class=\"language-text\">react</code> 和 <code class=\"language-text\">react-dom</code> , 如果不是这样, 那么我们的组件就无法读取到这个 <code class=\"language-text\">dispatcher</code> ! 当在同一个组件树中<a href=\"https://github.com/facebook/react/issues/13991\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">存在多个 React 拷贝</a>的时候, 也会出现 bug. 多个拷贝还会引起很多其他不可预知的 bug, 因此使用 Hooks 时, 会强制我们的应用不允许存在多个 React 拷贝.</p>\n<p>在某些情况下, 我们还能够覆盖这个 <code class=\"language-text\">dispatcher</code> , 当然不推荐这样做. (对了, 上面说的 <code class=\"language-text\">__currentDispatcher</code> 这个变量名实际上和实际 React 使用的变量名其实并不一样, 你可以浏览源码找到实际的变量名). 那么这个某些情况具体有什么情况呢? 举个例子, React 开发者工具使用了<a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-debug-tools/src/ReactDebugHooks.js#L203-L214\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一个特殊的 dispatcher</a> 来获取 JavaScript 的栈踪迹用以查看 Hooks 树. 但是你要慎重做同样的事情.</p>\n<p>以上这点也说明了, Hooks 并非天然和 React 绑定. 如果未来其他库希望能够复用 Hooks, <code class=\"language-text\">dispatcher</code> 将会被转移到另外一个包中, 并以一等 API 的形式暴露出来, 当然我们会设计为这个 API 设计一个没那么 “恐怖” 的名字. 目前, 我们暂时不会这样做, 除非必要, 否则我们会避免过早地进行抽象.</p>\n<p><code class=\"language-text\">updater</code> 属性和 <code class=\"language-text\">__currentDispatcher</code> 对象是泛型程序设计原则中的一种形式: 依赖注入. 在这两种情况下, 渲染器将 <code class=\"language-text\">setState</code> 的实现注入到 React 包中, 使得我们的组件更有声明式的特点.</p>\n<p>当大家在使用 React 的时候, 并不需要思考这些原理. 我们希望 React 用户关注业务代码的优化甚于思考类似依赖注入这类抽象的概念. 不过如果你确实对 <code class=\"language-text\">this.setState()</code> 和 <code class=\"language-text\">useState()</code> 的内部实现感到好奇, 希望这篇文章能够帮到你.</p>","headings":[],"fields":{"slug":"/posts/how-does-setstate-know-what-to-do/","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2020-01-22","description":"How Does setState Know What to Do?","tags":["React"],"title":"setState如何知道自己应该做什么?","socialImage":null}}},"pageContext":{"slug":"/posts/how-does-setstate-know-what-to-do/"}},"staticQueryHashes":["251939775","401334301","825871152"]}