{"componentChunkName":"component---src-templates-blog-js","path":"/react-dnd-overview/","result":{"data":{"site":{"siteMetadata":{"title":"Fish's Blog"}},"markdownRemark":{"id":"ab0a1229-65c7-5ab8-8fca-1c2ac131050b","excerpt":"Overview: https://react-dnd.github.io/react-dnd/docs/overview React DnD 与市面上其他的拖拽库区别比较大, 如果你以前从来没有用过 React DnD, 上手会比较困难. 不过, 只要你了解了其中一些设计理念之后, 对 DnD…","html":"<p>Overview: <a href=\"https://react-dnd.github.io/react-dnd/docs/overview\">https://react-dnd.github.io/react-dnd/docs/overview</a></p>\n<p>React DnD 与市面上其他的拖拽库区别比较大, 如果你以前从来没有用过 React DnD, 上手会比较困难. 不过, 只要你了解了其中一些设计理念之后, 对 DnD 的理解和上手就会更容易了. 因此我建议大家在阅读文档的其他部分时, 首先阅读这一部分, 了解一些重要概念.</p>\n<p>React DnD 中某些概念与与 <a href=\"http://facebook.github.io/flux/\">Flux</a> 和 <a href=\"https://github.com/reactjs/react-redux\">Redux</a> 类似.  这并非巧合, 它内部使用的就是 Redux.</p>\n<p>React DnD 基于 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Drag_and_drop\">HTML5 drag and drop API (HTML5 拖拽API)</a> 实现. 个人认为将其作为默认实现是十分合理的, 因为它在拖拽状态的预览效果就是被拖拽元素本身的样式, 用户不需要再对预览的效果做额外的处理实现. 同时, 这个 API 也是唯一处理文件拖拽的 API.</p>\n<p>但是 HTML5 拖拽 API 有一些缺陷, 它不支持触摸屏. 同时在 IE 浏览器中还存在一些兼容性问题, 因此在 IE 中可以扩展的功能相比其他浏览器也比较少.</p>\n<p>于是, 在 React DnD 中, 以<strong>插件化的方式实现了对 HTML5 拖拽 API 的依赖.</strong> 你可以选择不依赖该 API, 基于浏览器的触摸事件和鼠标事件等, 自己去实现拖拽的功能. 这种插件化的实现方式, 在 React DnD中, 被称为底层. 目前 React DnD所依赖的底层只有 <a href=\"https://react-dnd.github.io/react-dnd/docs/backends/html5\">HTML5 backend</a> , 后续我们会有更多的依赖.</p>\n<p>React DnD 底层的作用和 React 的合成事件系统有点类似: <strong>都处理了原生的 DOM 事件并抹平了各个浏览器之间的差异(兼容性问题).</strong> 尽管有这些类似之处, 但是 React DnD 并不依赖 React 以及它的合成事件. 本质上来说, React DnD 底层所作的工作就是将 DOM 事件翻译成内部的 Redux action, 以便 React DnD 对它们进行处理. </p>\n<p>与 Flux 或者 Redux 类似的是, React DnD 操作的是数据, 而非视图, 并且均为单一信息源. 当用户在屏幕中拖拽某些部分时, 我们并不将这些部分称为组件或者 DOM 节点, 而是某种类型的项目 (item).</p>\n<p>那么项目具体表示的是什么呢? 它是一个 JavaScript 对象, 描述了用户正在拖拽的内容. 举个例子, 在看板类的应用中, 用户所拖拽的卡片, 用项目的形式描述就会像是这样 <code class=\"language-text\">{ cardId: 42 }</code>. 在国际象棋游戏中, 当用户拿起一个棋子, item 可能就是这样 <code class=\"language-text\">{ fromCell: &#39;C5&#39;, piece: &#39;queen&#39; }</code> . <strong>将所拖拽的数据以对象的形式表示有利于组件之间的解耦.</strong></p>\n<p>那么类型表示的又是什么呢?  它表示一类项目. 在看板应用中, 会存在一个卡片类型, 代表所有可拖拽的卡片类项目, 还会存在列表类型, 代表某些卡片所在的容器区域. 而在国际象棋游戏中, 也许就只有一个类型: 棋子.</p>\n<p>类型是一个重要的概念, 当我们的应用规模逐渐扩大之后, 可能希望有更多可拖拽的部分, 我们当然不可能针对所有的可拖拽部分使用同一类事件处理器. <strong>类型的概念能够确保拖拽元素和拖拽目标(区域)互相匹配.</strong>  那么我们就需要事先列举出应用中包含的所有可拖拽类型, 就像在 Redux 中列举出所有 action 一样.</p>\n<p>拖拽的动作在内部是有状态的. 拖拽的操作要么处于正在进行状态, 要么处于静止状态. 当前状态的所有者一定属于某个类型, 某个项目. ****</p>\n<p>React DnD 通过内部状态存储单元的某些小容器(叫做<em>监视器</em>)将拖拽的状态暴露出来. <strong>我们能利用监视器所提供的信息, 更新组件的状态, 以处理拖拽状态的变化.</strong></p>\n<p>对于需要追踪拖拽状态的组件, 用户可以定义一个 <em>收集函数</em> , 通过该函数获取监视器所提供的拖拽状态信息, 并做出对应的处理. React DnD 会在必要的时候调用收集器函数, 并合并返回值, 将其作为属性值传入组件中.</p>\n<p>举个具体的例子, 当某个棋子被拖拽到某个棋盘格中时, 我们需要高亮该棋盘格. 那么 <code class=\"language-text\">Cell</code> 组件的收集函数可以这样定义:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">monitor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    highlighted<span class=\"token operator\">:</span> monitor<span class=\"token punctuation\">.</span><span class=\"token function\">canDrop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    hovered<span class=\"token operator\">:</span> monitor<span class=\"token punctuation\">.</span><span class=\"token function\">isOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以上函数会告诉 React DnD, 将实时更新的 <code class=\"language-text\">highlighted</code> 和 <code class=\"language-text\">hovered</code> 参数值传给所有 <code class=\"language-text\">Cell</code> 的实例. </p>\n<p>之前提到, DnD 的底层处理了 DOM 事件, 然而我们的组件本身却是使用 React 来描述 DOM 的, 那么内部是如何知道应该响应哪一个 DOM 节点的呢?  答案是连接器 <em>connectors</em> . <strong>连接器允许用户在 <code class=\"language-text\">render</code> 函数中为 DOM 节点分配一系列预先定义好的角色.</strong></p>\n<p>实际上, 连接器是传入收集器函数的第一个参数. 现在看看代码例子, 我们应该如何用连接器来声明拖拽目标.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">connect<span class=\"token punctuation\">,</span> monitor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    highlighted<span class=\"token operator\">:</span> monitor<span class=\"token punctuation\">.</span><span class=\"token function\">canDrop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    hovered<span class=\"token operator\">:</span> monitor<span class=\"token punctuation\">.</span><span class=\"token function\">isOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    connectDropTarget<span class=\"token operator\">:</span> connect<span class=\"token punctuation\">.</span><span class=\"token function\">dropTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在组件的 <code class=\"language-text\">render</code> 方法中, 我们能同时获取到监视器暴露出的数据和连接器暴露出的函数:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> highlighted<span class=\"token punctuation\">,</span> hovered<span class=\"token punctuation\">,</span> connectDropTarget <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">connectDropTarget</span><span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">classSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'Cell'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Cell--highlighted'</span><span class=\"token operator\">:</span> highlighted<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Cell--hovered'</span><span class=\"token operator\">:</span> hovered\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>调用 <code class=\"language-text\">connectDropTarget</code> 方法后, React DnD 就能够知道组件对应的根 DOM 节点是否为合法的可拖拽目标, 同时 DnD 也会在内部处理拖拽和鼠标悬停事件. 事实上, DnD 会给用户的 React 组件关联一个<a href=\"https://zh-hans.reactjs.org/docs/forwarding-refs.html#gatsby-focus-wrapper\">回调 ref</a> . 同时, 连接器返回的函数能够被缓存下来, 因此也不会影响 <code class=\"language-text\">shouldComponentUpdate</code> 的优化效果.</p>\n<p>至此, 我们对 DnD 底层如何与 DOM 和数据做交互进行了介绍, 具体的交互形式分别以 <code class=\"language-text\">items</code>和 <code class=\"language-text\">types</code> 的形式体现, 同时还了解了收集函数是通过监视器和连接器来声明 DnD 注入到组件中的属性的. </p>\n<p>接下来我们要了解, 应该如何配置我们的组件, 以确保那些属性确实被注入了呢? 同时, 如果我们希望针对拖拽事件执行一些副作用操作, 又该怎么执行呢? 这时候就要依赖拖拽元素(<em>drag sources</em> )和拖拽目标 (<em>drag targets</em>) 了. 这两者是 React DnD 中较为重要的两个概念. <strong>它们将类型, 项目, 副作用, 收集器函数与你的 React 组件进行关联.</strong> </p>\n<p>如果你希望应用中某个组件或者某个部分是可拖拽的, 你需要将这个组件声明为拖拽元素. 拖拽元素在被声明的同时也会注册某个类型, 同时, 用户必须实现一个方法, 该方法的功能是, 根据组件的属性生成一个特定类型的项目.  除了上述必须实现的方法之外, 用户还可以声明一些可选方法, 以处理拖拽事件.  声明拖拽元素的同时还可以直接声明收集器函数.</p>\n<p>拖拽目标和拖拽元素很像. 它们唯一的区别就是单个拖拽目标一次可能会被注册多个类型. and instead of producing an item, it may handle its hover or drop.</p>\n<h3 id=\"高阶组件和装饰器\" style=\"position:relative;\"><a href=\"#%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%92%8C%E8%A3%85%E9%A5%B0%E5%99%A8\" aria-label=\"高阶组件和装饰器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>高阶组件和装饰器</h3>\n<p>现在还有个问题, 如何包裹你的组件呢? 包裹又意味着什么? 如果你从未使用过高阶组件, 建议先阅读<a href=\"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\">这篇文章</a>, 文章对高阶组件这个概念做出了详细的解释.</p>\n<p><strong>简单来说, 高阶组件实际上是一个函数, 它接受一个 React 类组件, 返回另一个 React 类组件.</strong> DnD 所提供的包裹组件, 就是一个高阶组件, 在 DnD 的 <code class=\"language-text\">render</code> 方法中所渲染的组件, 会被高阶组件包裹处理: 为被包裹的组件添加一些有用的属性和方法. </p>\n<p>在 React DnD 中, <code class=\"language-text\">[DragSource](https://react-dnd.github.io/react-dnd/docs/api/drag-source)</code> (拖拽元素)和 <code class=\"language-text\">[DropTarget](https://react-dnd.github.io/react-dnd/docs/api/drop-target)</code> (拖拽目标), 以及一些在暴露在顶层的函数, 实际上都是高阶组件. 就是这些高阶组件将拖拽的逻辑整合到你自己的组件中.</p>\n<p>使用这些高阶组件时, 有一点需要特别注意的是: 存在着两次函数调用. 举个例子, 将你的组件包裹到 <code class=\"language-text\">[DragSource](https://react-dnd.github.io/react-dnd/docs/api/drag-source)</code> 中, 需要这样实现:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DragSource <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dnd'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">YourComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">DragSource</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>YourComponent<span class=\"token punctuation\">)</span></code></pre></div>\n<p>注意, 在第一个函数调用中声明了 <code class=\"language-text\">[DragSource](https://react-dnd.github.io/react-dnd/docs/api/drag-source)</code>  的参数之后, 还有另一个函数调用, 在该函数调用中才可以传入你的组件. 这叫做函数的<a href=\"https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96\">柯里化</a>, 还可以称作是<a href=\"https://en.wikipedia.org/wiki/Partial_application\">Partial application</a>. 这样的特性, 使得实现<a href=\"https://github.com/wycats/javascript-decorators\">装饰器语法</a>成为可能.</p>\n<p>当然我们并没有强制要求你使用装饰器语法, 不过如果想要使用的话, 记得用 Babel 编译你的代码, 并在配置文件 <a href=\"https://babeljs.io/docs/usage/babelrc/\">.babelrc</a> 中添加该配置: <code class=\"language-text\">{ &quot;stage&quot;: 1 }</code>. </p>\n<p>即使你没有使用装饰器语法的打算,  partial application 这个概念也能为我们带来比较大的便利. 当你需要合并多个 <code class=\"language-text\">[DragSource](https://react-dnd.github.io/react-dnd/docs/api/drag-source)</code> 和 <code class=\"language-text\">[DropTarget](https://react-dnd.github.io/react-dnd/docs/api/drop-target)</code> 的时候, 如果采取使用普通的 JavsScript 语法的方式, 或许你会用到一个函数组合类工具方法 : <a href=\"https://lodash.com/docs/4.17.15#flow\"><code class=\"language-text\">_.flow</code></a> 来达到合并的目的. 但是有了装饰器之后, 只需要简单地对装饰器进行重叠, 就能够达到同样的目的.</p>\n<p>假设我们有个 <code class=\"language-text\">Card</code> 元素, 以下的代码就是将 <code class=\"language-text\">Card</code> 元素包裹到拖拽元素中的一个实例.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DragSource <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dnd'</span>\n\n<span class=\"token comment\">// Drag sources and drop targets only interact</span>\n<span class=\"token comment\">// if they have the same string type.</span>\n<span class=\"token comment\">// You want to keep types in a separate file with</span>\n<span class=\"token comment\">// the rest of your app's constants.</span>\n<span class=\"token keyword\">const</span> Types <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">CARD</span><span class=\"token operator\">:</span> <span class=\"token string\">'card'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Specifies the drag source contract.\n * Only `beginDrag` function is required.\n */</span>\n<span class=\"token keyword\">const</span> cardSource <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beginDrag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Return the data describing the dragged item</span>\n    <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> item\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">endDrag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> monitor<span class=\"token punctuation\">,</span> component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>monitor<span class=\"token punctuation\">.</span><span class=\"token function\">didDrop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// When dropped on a compatible target, do something</span>\n    <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> monitor<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> dropResult <span class=\"token operator\">=</span> monitor<span class=\"token punctuation\">.</span><span class=\"token function\">getDropResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    CardActions<span class=\"token punctuation\">.</span><span class=\"token function\">moveCardToList</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> dropResult<span class=\"token punctuation\">.</span>listId<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n * Specifies which props to inject into your component.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">connect<span class=\"token punctuation\">,</span> monitor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Call this function inside render()</span>\n    <span class=\"token comment\">// to let React DnD handle the drag events:</span>\n    connectDragSource<span class=\"token operator\">:</span> connect<span class=\"token punctuation\">.</span><span class=\"token function\">dragSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// You can ask the monitor about the current drag state:</span>\n    isDragging<span class=\"token operator\">:</span> monitor<span class=\"token punctuation\">.</span><span class=\"token function\">isDragging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Card</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Your component receives its own props as usual</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n\n  <span class=\"token comment\">// These two props are injected by React DnD,</span>\n  <span class=\"token comment\">// as defined by your `collect` function above:</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isDragging<span class=\"token punctuation\">,</span> connectDragSource <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">connectDragSource</span><span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      I am a draggable card number </span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isDragging <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">' (and I am being dragged now)'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Export the wrapped version</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">DragSource</span><span class=\"token punctuation\">(</span>Types<span class=\"token punctuation\">.</span><span class=\"token constant\">CARD</span><span class=\"token punctuation\">,</span> cardSource<span class=\"token punctuation\">,</span> collect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Card<span class=\"token punctuation\">)</span></code></pre></div>\n<p>现在所有的准备工作已经做好, 接下来可以开始阅读文档的其他部分了. </p>\n<p>推荐阅读这个教程: </p>\n<p><a href=\"/blog/react-dnd-tutorial\">React DnD - 教程</a></p>","headings":[{"value":"高阶组件和装饰器","id":"高阶组件和装饰器","depth":3}],"timeToRead":9,"wordCount":{"words":394},"frontmatter":{"toc":false,"title":"React DnD 文档翻译 - 概览","date":"April 08, 2021","description":"React DnD Overview","draft":false}},"previous":{"fields":{"slug":"/build-your-own-react/"},"frontmatter":{"title":"实现自己的 React"}},"next":{"fields":{"slug":"/react-dnd-tutorial/"},"frontmatter":{"title":"React DnD 文档翻译 - 教程"}}},"pageContext":{"id":"ab0a1229-65c7-5ab8-8fca-1c2ac131050b","previousPostId":"87a8465c-204d-5bcf-a903-7fca9c8a4fd0","nextPostId":"1c97a345-0ec2-5688-b06e-a671c4d3aa0e"}},"staticQueryHashes":["2841359383","3257411868"]}