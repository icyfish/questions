{"componentChunkName":"component---src-templates-blog-js","path":"/ssr-render-html-string/","result":{"data":{"site":{"siteMetadata":{"title":"Fish's Blog"}},"markdownRemark":{"id":"c0513e92-9964-5a95-864b-39f4bf9a4b02","excerpt":"问题背景 看到这个问题, 大家可能会觉得很诧异, 不是直接用  就能实现了吗? 但是实际情况并没有那么简单.  首先介绍我们的技术框架, 项目使用了 react-imvc 实现页面的同构渲染. 针对标题的需求, 我们会实现一个 React 组件, 接受接口下发的 html…","html":"<h2 id=\"问题背景\" style=\"position:relative;\"><a href=\"#%E9%97%AE%E9%A2%98%E8%83%8C%E6%99%AF\" aria-label=\"问题背景 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>问题背景</h2>\n<p>看到这个问题, 大家可能会觉得很诧异, 不是直接用 <code class=\"language-text\">dangerouslySetInnerHTML</code> 就能实现了吗? 但是实际情况并没有那么简单. </p>\n<p>首先介绍我们的技术框架, 项目使用了 <a href=\"https://github.com/Lucifier129/react-imvc\">react-imvc</a> 实现页面的同构渲染.</p>\n<p>针对标题的需求, 我们会实现一个 React 组件, 接受接口下发的 html 字符串(见下, &#x3C; 是因为内容被框架处理过), 渲染出对应的内容.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> codeBlock <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n&lt;script\n  src=\"https://code.jquery.com/jquery-3.6.0.min.js\">&amp;lt/script>\n&lt;script>\nconsole.log($);\n&amp;lt/script>\n&lt;script>\nconsole.log(222);\n&amp;lt/script>\n&lt;h1>123&lt;/h1></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>但是在实现的过程中发现一个问题, 由于我们的页面是同构渲染的, React 组件需要同时支持服务端渲染和客户端渲染. </p>\n<p>在服务端渲染的场景下, 简单地 <code class=\"language-text\">dangerouslySetInnerHTML</code> 能够直接满足我们的需求. <strong>但是在客户端渲染的情况下, 我们发现 <code class=\"language-text\">script</code> 标签中的内容并没有执行</strong>. 那么如何解决这个问题呢?</p>\n<h2 id=\"解决问题\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98\" aria-label=\"解决问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解决问题</h2>\n<h3 id=\"分离-html-中-script-标签与其他标签\" style=\"position:relative;\"><a href=\"#%E5%88%86%E7%A6%BB-html-%E4%B8%AD-script-%E6%A0%87%E7%AD%BE%E4%B8%8E%E5%85%B6%E4%BB%96%E6%A0%87%E7%AD%BE\" aria-label=\"分离 html 中 script 标签与其他标签 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>分离 html 中 script 标签与其他标签</h3>\n<p>JavaScript 代码没有执行的原因是<a href=\"https://stackoverflow.com/questions/13390588/script-tag-create-with-innerhtml-of-a-div-doesnt-work/13392818#13392818\">规范不允许</a>在 <code class=\"language-text\">innerHTML</code> 中插入 <code class=\"language-text\">script</code> 标签, 即使 DOM 元素中可以查看到, 代码的内容也不会执行.</p>\n<p>因此我们要在代码中针对 <code class=\"language-text\">script</code> 标签和其他标签做出分离的处理:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">/**\n * 分离出script标签和其他标签内容\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">separateScript</span><span class=\"token punctuation\">(</span>codeBlock <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 针对 react-imvc 框架, 需要做这样的处理.</span>\n  codeBlock <span class=\"token operator\">=</span> <span class=\"token function\">formatScript</span><span class=\"token punctuation\">(</span>codeBlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;script\\b[^>]*>([\\s\\S]*?)&lt;\\/script></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gm</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> match<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> scriptStrList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> contentWithoutScript <span class=\"token operator\">=</span> codeBlock<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>match <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>codeBlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    scriptStrList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>scriptStrList<span class=\"token punctuation\">,</span> contentWithoutScript<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 服务端渲染时 框架的 Script 组件 https://github.com/Lucifier129/react-imvc/blob/master/component/Script.js\n * 把 &lt;/script 转成了 &amp;lt/script, 把它转回来\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">formatScript</span><span class=\"token punctuation\">(</span>codeBlock <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> scriptRe <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&amp;lt\\/script</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> codeBlock<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>scriptRe<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;/script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>经过处理之后, 我们会得到类似以下形式的 <code class=\"language-text\">scriptStrList</code> </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> scriptStrList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'&lt;script\\n  src=\"https://code.jquery.com/jquery-3.6.0.min.js\">&lt;/script>'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"&lt;script>\\nconsole.log($);\\n&lt;/script>\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"&lt;script>\\nconsole.log(222);\\n&lt;/script>\"</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我们的 React 组件, 会是这样的:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useMemo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> useAttachScript <span class=\"token keyword\">from</span> <span class=\"token string\">\"../hooks/useAttachScript\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> separateScript <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 由于客户端渲染的情况下使用  dangerouslySetInnerHTML 渲染的 script 标签中的代码无法执行\n * 因此需要分离 html 与 script\n */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">CustomCode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> codeBlock <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>scriptStrList<span class=\"token punctuation\">,</span> markup<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">separateScript</span><span class=\"token punctuation\">(</span>codeBlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>codeBlock<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useAttachScript</span><span class=\"token punctuation\">(</span>scriptStrList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">dangerouslySetInnerHTML</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> __html<span class=\"token operator\">:</span> markup <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 使用: codeBlock 就是问题背景中列出的 codeBlock</span>\n<span class=\"token comment\">// &lt;CustomCode codeBlock={codeBlock} /></span></code></pre></div>\n<h3 id=\"手动构造-script-节点\" style=\"position:relative;\"><a href=\"#%E6%89%8B%E5%8A%A8%E6%9E%84%E9%80%A0-script-%E8%8A%82%E7%82%B9\" aria-label=\"手动构造 script 节点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>手动构造 script 节点</h3>\n<p>可以从组件代码中看到这样一个 hook: <code class=\"language-text\">useAttachScript</code> . 现在我们开始实现这个 hook, 它做的事情是: 处理 <code class=\"language-text\">scriptStrList</code> 然后用 <code class=\"language-text\">appendChild</code> 的形式插入我们的 <code class=\"language-text\">script</code> 标签:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useAttachScript</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scriptStrList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scriptStrList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">appendScriptList</span><span class=\"token punctuation\">(</span>scriptStrList<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>scriptStrList<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">appendScriptList</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">scriptMarkup</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> scriptHTMLCollection <span class=\"token operator\">=</span> <span class=\"token function\">getScriptHTMLCollection</span><span class=\"token punctuation\">(</span>scriptMarkup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 获取 div 中的 script 标签列表, scriptHTMLCollection 的类型为 HTMLCollection, 而不是 NodeList</span>\n  <span class=\"token comment\">// 因此实现一个 cloneScript 方法进行转换</span>\n  <span class=\"token keyword\">const</span> scriptNodeList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>scriptHTMLCollection<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> <span class=\"token function\">cloneScript</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\tscriptNodeList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">script</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getScriptHTMLCollection</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">scriptMarkup</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 手动创建一个 div 用以获取 script 标签</span>\n  <span class=\"token keyword\">let</span> divElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  divElem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> scriptMarkup<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> divElem<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cloneScript</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">sourceScript</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>sourceScript<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">attr</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    script<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  script<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> sourceScript<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> script<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>以上的代码看似已经没有大问题了, 但是对于最开始的 html 字符串示例, 我们发现了一个问题: 有可能抛出 <code class=\"language-text\">$ is not defined</code> 的错误, 虽然是代码本身的问题, 但我们还是希望再做出一些优化.</p>\n<h3 id=\"确保各个标签按照先后顺序执行\" style=\"position:relative;\"><a href=\"#%E7%A1%AE%E4%BF%9D%E5%90%84%E4%B8%AA%E6%A0%87%E7%AD%BE%E6%8C%89%E7%85%A7%E5%85%88%E5%90%8E%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C\" aria-label=\"确保各个标签按照先后顺序执行 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>确保各个标签按照先后顺序执行</h3>\n<p>由于我们的业务场景限制, 接口下发的 html 内容可能是运营人员或者产品经理所编写的. 所以我们在实现时要尽可能地避免代码出错, 在程序层面确保各个标签按照先后顺序执行.</p>\n<p><code class=\"language-text\">useAttachScript</code> 是在组件渲染完之后执行的, 因此不必担心我们的处理影响页面主要部分的渲染.</p>\n<p>那么开始优化 <code class=\"language-text\">useAttachScript</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useAttachScript</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scriptStrList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scriptStrList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">appendScriptList</span><span class=\"token punctuation\">(</span>scriptStrList<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>scriptStrList<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">appendScriptList</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">scriptMarkup</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> scriptHTMLCollection <span class=\"token operator\">=</span> <span class=\"token function\">getScriptHTMLCollection</span><span class=\"token punctuation\">(</span>scriptMarkup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 获取 div 中的 script 标签列表, scriptHTMLCollection 的类型为 HTMLCollection, 而不是 NodeList</span>\n  <span class=\"token comment\">// 因此实现一个 cloneScript 方法进行转换</span>\n  <span class=\"token keyword\">const</span> scriptNodeList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>scriptHTMLCollection<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> <span class=\"token function\">cloneScript</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 将 forEach 改造成 for of, 因为 forEach 中不支持 async/await</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> scriptElem <span class=\"token keyword\">of</span> scriptNodeList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">appendScript</span><span class=\"token punctuation\">(</span>scriptElem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">appendScript</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">scriptElem</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> attributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> scriptElem<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> src <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> attributes<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 如果有需要加载的外部脚本, 等加载完成之后再插入下一个脚本</span>\n      scriptElem<span class=\"token punctuation\">.</span>onload <span class=\"token operator\">=</span> resolve<span class=\"token punctuation\">;</span>\n      scriptElem<span class=\"token punctuation\">.</span>onerror <span class=\"token operator\">=</span> reject<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// 否则直接插入</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>scriptElem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getScriptHTMLCollection</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">scriptMarkup</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 手动创建一个 div 用以获取 script 标签</span>\n  <span class=\"token keyword\">let</span> divElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  divElem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> scriptMarkup<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> divElem<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cloneScript</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">sourceScript</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>sourceScript<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">attr</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    script<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  script<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> sourceScript<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> script<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>至此, 我们的 React 组件就能够同时支持服务端和客户端渲染了.</p>\n<p>最终代码示例: <a href=\"https://github.com/icyfish/react-app/blob/master/src/components/CustomCode.js\">Github Repo</a></p>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/13390588/script-tag-create-with-innerhtml-of-a-div-doesnt-work/13392818#13392818\">script tag create with innerHTML of a div doesn’t work</a></li>\n<li><a href=\"https://hacks.mozilla.org/2015/04/es6-in-depth-iterators-and-the-for-of-loop/\">ES6 In Depth: Iterators and the for-of loop</a></li>\n</ul>","headings":[{"value":"问题背景","id":"问题背景","depth":2},{"value":"解决问题","id":"解决问题","depth":2},{"value":"分离 html 中 script 标签与其他标签","id":"分离-html-中-script-标签与其他标签","depth":3},{"value":"手动构造 script 节点","id":"手动构造-script-节点","depth":3},{"value":"确保各个标签按照先后顺序执行","id":"确保各个标签按照先后顺序执行","depth":3},{"value":"参考","id":"参考","depth":2}],"frontmatter":{"title":"React 同构渲染 html 字符串","date":"April 19, 2021","description":"Render HTML string in React Components both for Server and Client Rendering","draft":false}},"previous":{"fields":{"slug":"/usedelegate-hook/"},"frontmatter":{"title":"实现一个事件委托 hook"}},"next":{"fields":{"slug":"/react-as-a-ui-runtime/"},"frontmatter":{"title":"React 作为 UI 运行时"}}},"pageContext":{"id":"c0513e92-9964-5a95-864b-39f4bf9a4b02","previousPostId":"8cc0ec57-59a5-5eaf-83d8-bf3a92cfd410","nextPostId":"25cb0682-4740-53b8-9967-b6e648e0a543"}},"staticQueryHashes":["2841359383","3257411868"]}